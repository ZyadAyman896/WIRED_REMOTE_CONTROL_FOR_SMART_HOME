
WIRED REMOTE CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d7c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000d7c  00000df0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e30  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001f0  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002045  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c9c  00000000  00000000  000030a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010d2  00000000  00000000  00003d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c4  00000000  00000000  00004e10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000897  00000000  00000000  000051d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012cd  00000000  00000000  00005a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00006d38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__ctors_end>
   4:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
   8:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
   c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  10:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  14:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  18:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  1c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  20:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  24:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  28:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  2c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  30:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  34:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  38:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  3c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  40:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  44:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  48:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  4c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  50:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  54:	f0 00       	.word	0x00f0	; ????
  56:	09 01       	movw	r0, r18
  58:	22 01       	movw	r4, r4
  5a:	3b 01       	movw	r6, r22
  5c:	53 01       	movw	r10, r6
  5e:	53 01       	movw	r10, r6
  60:	53 01       	movw	r10, r6
  62:	53 01       	movw	r10, r6
  64:	53 01       	movw	r10, r6
  66:	53 01       	movw	r10, r6
  68:	53 01       	movw	r10, r6
  6a:	53 01       	movw	r10, r6
  6c:	53 01       	movw	r10, r6
  6e:	53 01       	movw	r10, r6
  70:	53 01       	movw	r10, r6
  72:	53 01       	movw	r10, r6
  74:	53 01       	movw	r10, r6
  76:	53 01       	movw	r10, r6
  78:	53 01       	movw	r10, r6
  7a:	53 01       	movw	r10, r6
  7c:	53 01       	movw	r10, r6
  7e:	53 01       	movw	r10, r6
  80:	53 01       	movw	r10, r6
  82:	53 01       	movw	r10, r6
  84:	53 01       	movw	r10, r6
  86:	53 01       	movw	r10, r6
  88:	53 01       	movw	r10, r6
  8a:	53 01       	movw	r10, r6
  8c:	53 01       	movw	r10, r6
  8e:	53 01       	movw	r10, r6
  90:	53 01       	movw	r10, r6
  92:	53 01       	movw	r10, r6
  94:	f0 00       	.word	0x00f0	; ????
  96:	09 01       	movw	r0, r18
  98:	22 01       	movw	r4, r4
  9a:	3b 01       	movw	r6, r22
  9c:	60 01       	movw	r12, r0
  9e:	79 01       	movw	r14, r18
  a0:	92 01       	movw	r18, r4
  a2:	ab 01       	movw	r20, r22
  a4:	c3 01       	movw	r24, r6
  a6:	c3 01       	movw	r24, r6
  a8:	c3 01       	movw	r24, r6
  aa:	c3 01       	movw	r24, r6
  ac:	c3 01       	movw	r24, r6
  ae:	c3 01       	movw	r24, r6
  b0:	c3 01       	movw	r24, r6
  b2:	c3 01       	movw	r24, r6
  b4:	c3 01       	movw	r24, r6
  b6:	c3 01       	movw	r24, r6
  b8:	c3 01       	movw	r24, r6
  ba:	c3 01       	movw	r24, r6
  bc:	c3 01       	movw	r24, r6
  be:	c3 01       	movw	r24, r6
  c0:	c3 01       	movw	r24, r6
  c2:	c3 01       	movw	r24, r6
  c4:	c3 01       	movw	r24, r6
  c6:	c3 01       	movw	r24, r6
  c8:	c3 01       	movw	r24, r6
  ca:	c3 01       	movw	r24, r6
  cc:	c3 01       	movw	r24, r6
  ce:	c3 01       	movw	r24, r6
  d0:	c3 01       	movw	r24, r6
  d2:	c3 01       	movw	r24, r6
  d4:	c3 01       	movw	r24, r6
  d6:	c3 01       	movw	r24, r6
  d8:	c3 01       	movw	r24, r6
  da:	c3 01       	movw	r24, r6
  dc:	60 01       	movw	r12, r0
  de:	79 01       	movw	r14, r18
  e0:	92 01       	movw	r18, r4
  e2:	ab 01       	movw	r20, r22
  e4:	cf 01       	movw	r24, r30
  e6:	d1 01       	movw	r26, r2
  e8:	d3 01       	movw	r26, r6
  ea:	d5 01       	movw	r26, r10
  ec:	d6 01       	movw	r26, r12
  ee:	d6 01       	movw	r26, r12
  f0:	d6 01       	movw	r26, r12
  f2:	d6 01       	movw	r26, r12
  f4:	d6 01       	movw	r26, r12
  f6:	d6 01       	movw	r26, r12
  f8:	d6 01       	movw	r26, r12
  fa:	d6 01       	movw	r26, r12
  fc:	d6 01       	movw	r26, r12
  fe:	d6 01       	movw	r26, r12
 100:	d6 01       	movw	r26, r12
 102:	d6 01       	movw	r26, r12
 104:	d6 01       	movw	r26, r12
 106:	d6 01       	movw	r26, r12
 108:	d6 01       	movw	r26, r12
 10a:	d6 01       	movw	r26, r12
 10c:	d6 01       	movw	r26, r12
 10e:	d6 01       	movw	r26, r12
 110:	d6 01       	movw	r26, r12
 112:	d6 01       	movw	r26, r12
 114:	d6 01       	movw	r26, r12
 116:	d6 01       	movw	r26, r12
 118:	d6 01       	movw	r26, r12
 11a:	d6 01       	movw	r26, r12
 11c:	d6 01       	movw	r26, r12
 11e:	d6 01       	movw	r26, r12
 120:	d6 01       	movw	r26, r12
 122:	d6 01       	movw	r26, r12
 124:	cf 01       	movw	r24, r30
 126:	d1 01       	movw	r26, r2
 128:	d3 01       	movw	r26, r6
 12a:	d5 01       	movw	r26, r10
 12c:	0b 04       	cpc	r0, r11
 12e:	10 04       	cpc	r1, r0
 130:	15 04       	cpc	r1, r5
 132:	1a 04       	cpc	r1, r10
 134:	1f 04       	cpc	r1, r15
 136:	23 04       	cpc	r2, r3
 138:	27 04       	cpc	r2, r7
 13a:	94 04       	cpc	r9, r4
 13c:	9e 04       	cpc	r9, r14
 13e:	a8 04       	cpc	r10, r8
 140:	b2 04       	cpc	r11, r2
 142:	bc 04       	cpc	r11, r12
 144:	c6 04       	cpc	r12, r6
 146:	d0 04       	cpc	r13, r0
 148:	da 04       	cpc	r13, r10

0000014a <__ctors_end>:
 14a:	11 24       	eor	r1, r1
 14c:	1f be       	out	0x3f, r1	; 63
 14e:	cf e5       	ldi	r28, 0x5F	; 95
 150:	d8 e0       	ldi	r29, 0x08	; 8
 152:	de bf       	out	0x3e, r29	; 62
 154:	cd bf       	out	0x3d, r28	; 61

00000156 <__do_copy_data>:
 156:	10 e0       	ldi	r17, 0x00	; 0
 158:	a0 e6       	ldi	r26, 0x60	; 96
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	ec e7       	ldi	r30, 0x7C	; 124
 15e:	fd e0       	ldi	r31, 0x0D	; 13
 160:	02 c0       	rjmp	.+4      	; 0x166 <__do_copy_data+0x10>
 162:	05 90       	lpm	r0, Z+
 164:	0d 92       	st	X+, r0
 166:	a0 37       	cpi	r26, 0x70	; 112
 168:	b1 07       	cpc	r27, r17
 16a:	d9 f7       	brne	.-10     	; 0x162 <__do_copy_data+0xc>
 16c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <main>
 170:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <_exit>

00000174 <__bad_interrupt>:
 174:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000178 <ADC_u16Read_Value>:
}
*/
u16 ADC_u16Read_Value()
{
	//starting conversion
	ADCSRA |= (1<<PIN_NO_6) ;
 178:	86 b1       	in	r24, 0x06	; 6
 17a:	80 64       	ori	r24, 0x40	; 64
 17c:	86 b9       	out	0x06, r24	; 6
	//WAITING UNTIL FINISHING
	while(READ_PIN(ADCSRA,PIN_NO_4) == ZERO);
 17e:	34 9b       	sbis	0x06, 4	; 6
 180:	fe cf       	rjmp	.-4      	; 0x17e <ADC_u16Read_Value+0x6>
	//CLEARING THE FLAG BY SETTING THE BIT 4  – ADIF: ADC Interrupt Flag
	SET_PIN(ADCSRA,PIN_NO_4);	
 182:	86 b1       	in	r24, 0x06	; 6
 184:	80 61       	ori	r24, 0x10	; 16
 186:	86 b9       	out	0x06, r24	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	8a e1       	ldi	r24, 0x1A	; 26
 18a:	8a 95       	dec	r24
 18c:	f1 f7       	brne	.-4      	; 0x18a <ADC_u16Read_Value+0x12>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <ADC_u16Read_Value+0x18>
	_delay_us(10);
	//returning the value of adc
	return ADC ;
 190:	84 b1       	in	r24, 0x04	; 4
 192:	95 b1       	in	r25, 0x05	; 5
}
 194:	08 95       	ret

00000196 <ADC_vInit_>:

void ADC_vInit_()
{
   	
	//making port a pin0 is input which is ADC0
   	DIO_vSet_Pin_Direction('a',PIN_NO_0,INPUT);	
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	81 e6       	ldi	r24, 0x61	; 97
 19c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_vSet_Pin_Direction>
			CLR_PIN(SFIOR,PIN_NO_5);
			CLR_PIN(SFIOR,PIN_NO_6);
			CLR_PIN(SFIOR,PIN_NO_7);
		#endif
	#elif ADC_MODE == ADC_Single_Conv
		ADCSRA = (1<<PIN_NO_7)  | (1<<PIN_NO_2) | (1<<PIN_NO_1) | (1<<PIN_NO_0) ; /* Enable ADC, MODE ,  FCPU/128 = 62.5KHZ  */
 1a0:	87 e8       	ldi	r24, 0x87	; 135
 1a2:	86 b9       	out	0x06, r24	; 6
		ADMUX = (1<<PIN_NO_6);			/* Vref: AVCC , ADLAR = 0 ,   */
 1a4:	80 e4       	ldi	r24, 0x40	; 64
 1a6:	87 b9       	out	0x07, r24	; 7
		//choosing channel zero
		CLR_PIN(ADMUX,PIN_NO_0);
 1a8:	87 b1       	in	r24, 0x07	; 7
 1aa:	8e 7f       	andi	r24, 0xFE	; 254
 1ac:	87 b9       	out	0x07, r24	; 7
		CLR_PIN(ADMUX,PIN_NO_1);
 1ae:	87 b1       	in	r24, 0x07	; 7
 1b0:	8d 7f       	andi	r24, 0xFD	; 253
 1b2:	87 b9       	out	0x07, r24	; 7
		CLR_PIN(ADMUX,PIN_NO_2);
 1b4:	87 b1       	in	r24, 0x07	; 7
 1b6:	8b 7f       	andi	r24, 0xFB	; 251
 1b8:	87 b9       	out	0x07, r24	; 7
		CLR_PIN(ADMUX,PIN_NO_3);
 1ba:	87 b1       	in	r24, 0x07	; 7
 1bc:	87 7f       	andi	r24, 0xF7	; 247
 1be:	87 b9       	out	0x07, r24	; 7
		CLR_PIN(ADMUX,PIN_NO_4);	
 1c0:	87 b1       	in	r24, 0x07	; 7
 1c2:	8f 7e       	andi	r24, 0xEF	; 239
 1c4:	87 b9       	out	0x07, r24	; 7
 1c6:	08 95       	ret

000001c8 <DIO_vSet_Pin_Direction>:
		case 'c':
		WRITE_REG(DDRC,copy_u8PortDirection);
		break;
		case'D':
		case 'd':
		WRITE_REG(DDRD,copy_u8PortDirection);
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	fc 01       	movw	r30, r24
 1cc:	e1 54       	subi	r30, 0x41	; 65
 1ce:	f1 09       	sbc	r31, r1
 1d0:	e4 32       	cpi	r30, 0x24	; 36
 1d2:	f1 05       	cpc	r31, r1
 1d4:	08 f0       	brcs	.+2      	; 0x1d8 <DIO_vSet_Pin_Direction+0x10>
 1d6:	67 c0       	rjmp	.+206    	; 0x2a6 <DIO_vSet_Pin_Direction+0xde>
 1d8:	e6 5d       	subi	r30, 0xD6	; 214
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__tablejump2__>
 1e0:	41 30       	cpi	r20, 0x01	; 1
 1e2:	59 f4       	brne	.+22     	; 0x1fa <DIO_vSet_Pin_Direction+0x32>
 1e4:	2a b3       	in	r18, 0x1a	; 26
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_vSet_Pin_Direction+0x28>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_vSet_Pin_Direction+0x24>
 1f4:	82 2b       	or	r24, r18
 1f6:	8a bb       	out	0x1a, r24	; 26
 1f8:	08 95       	ret
 1fa:	2a b3       	in	r18, 0x1a	; 26
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_vSet_Pin_Direction+0x3e>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_vSet_Pin_Direction+0x3a>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	8a bb       	out	0x1a, r24	; 26
 210:	08 95       	ret
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	59 f4       	brne	.+22     	; 0x22c <DIO_vSet_Pin_Direction+0x64>
 216:	27 b3       	in	r18, 0x17	; 23
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_vSet_Pin_Direction+0x5a>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_vSet_Pin_Direction+0x56>
 226:	82 2b       	or	r24, r18
 228:	87 bb       	out	0x17, r24	; 23
 22a:	08 95       	ret
 22c:	27 b3       	in	r18, 0x17	; 23
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_vSet_Pin_Direction+0x70>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_vSet_Pin_Direction+0x6c>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	87 bb       	out	0x17, r24	; 23
 242:	08 95       	ret
 244:	41 30       	cpi	r20, 0x01	; 1
 246:	59 f4       	brne	.+22     	; 0x25e <DIO_vSet_Pin_Direction+0x96>
 248:	24 b3       	in	r18, 0x14	; 20
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_vSet_Pin_Direction+0x8c>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_vSet_Pin_Direction+0x88>
 258:	82 2b       	or	r24, r18
 25a:	84 bb       	out	0x14, r24	; 20
 25c:	08 95       	ret
 25e:	24 b3       	in	r18, 0x14	; 20
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_vSet_Pin_Direction+0xa2>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_vSet_Pin_Direction+0x9e>
 26e:	80 95       	com	r24
 270:	82 23       	and	r24, r18
 272:	84 bb       	out	0x14, r24	; 20
 274:	08 95       	ret
 276:	41 30       	cpi	r20, 0x01	; 1
 278:	59 f4       	brne	.+22     	; 0x290 <DIO_vSet_Pin_Direction+0xc8>
 27a:	21 b3       	in	r18, 0x11	; 17
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_vSet_Pin_Direction+0xbe>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_vSet_Pin_Direction+0xba>
 28a:	82 2b       	or	r24, r18
 28c:	81 bb       	out	0x11, r24	; 17
 28e:	08 95       	ret
 290:	21 b3       	in	r18, 0x11	; 17
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_vSet_Pin_Direction+0xd4>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_vSet_Pin_Direction+0xd0>
 2a0:	80 95       	com	r24
 2a2:	82 23       	and	r24, r18
 2a4:	81 bb       	out	0x11, r24	; 17
 2a6:	08 95       	ret

000002a8 <DIO_vSet_Pin_Value>:
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	fc 01       	movw	r30, r24
 2ac:	e1 54       	subi	r30, 0x41	; 65
 2ae:	f1 09       	sbc	r31, r1
 2b0:	e4 32       	cpi	r30, 0x24	; 36
 2b2:	f1 05       	cpc	r31, r1
 2b4:	08 f0       	brcs	.+2      	; 0x2b8 <DIO_vSet_Pin_Value+0x10>
 2b6:	67 c0       	rjmp	.+206    	; 0x386 <DIO_vSet_Pin_Value+0xde>
 2b8:	e2 5b       	subi	r30, 0xB2	; 178
 2ba:	ff 4f       	sbci	r31, 0xFF	; 255
 2bc:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__tablejump2__>
 2c0:	41 11       	cpse	r20, r1
 2c2:	0c c0       	rjmp	.+24     	; 0x2dc <DIO_vSet_Pin_Value+0x34>
 2c4:	2b b3       	in	r18, 0x1b	; 27
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_vSet_Pin_Value+0x28>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_vSet_Pin_Value+0x24>
 2d4:	80 95       	com	r24
 2d6:	82 23       	and	r24, r18
 2d8:	8b bb       	out	0x1b, r24	; 27
 2da:	08 95       	ret
 2dc:	2b b3       	in	r18, 0x1b	; 27
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_vSet_Pin_Value+0x40>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_vSet_Pin_Value+0x3c>
 2ec:	82 2b       	or	r24, r18
 2ee:	8b bb       	out	0x1b, r24	; 27
 2f0:	08 95       	ret
 2f2:	41 11       	cpse	r20, r1
 2f4:	0c c0       	rjmp	.+24     	; 0x30e <DIO_vSet_Pin_Value+0x66>
 2f6:	28 b3       	in	r18, 0x18	; 24
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_vSet_Pin_Value+0x5a>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_vSet_Pin_Value+0x56>
 306:	80 95       	com	r24
 308:	82 23       	and	r24, r18
 30a:	88 bb       	out	0x18, r24	; 24
 30c:	08 95       	ret
 30e:	28 b3       	in	r18, 0x18	; 24
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_vSet_Pin_Value+0x72>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	6a 95       	dec	r22
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_vSet_Pin_Value+0x6e>
 31e:	82 2b       	or	r24, r18
 320:	88 bb       	out	0x18, r24	; 24
 322:	08 95       	ret
 324:	41 11       	cpse	r20, r1
 326:	0c c0       	rjmp	.+24     	; 0x340 <DIO_vSet_Pin_Value+0x98>
 328:	25 b3       	in	r18, 0x15	; 21
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_vSet_Pin_Value+0x8c>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_vSet_Pin_Value+0x88>
 338:	80 95       	com	r24
 33a:	82 23       	and	r24, r18
 33c:	85 bb       	out	0x15, r24	; 21
 33e:	08 95       	ret
 340:	25 b3       	in	r18, 0x15	; 21
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_vSet_Pin_Value+0xa4>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	6a 95       	dec	r22
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_vSet_Pin_Value+0xa0>
 350:	82 2b       	or	r24, r18
 352:	85 bb       	out	0x15, r24	; 21
 354:	08 95       	ret
 356:	41 11       	cpse	r20, r1
 358:	0c c0       	rjmp	.+24     	; 0x372 <DIO_vSet_Pin_Value+0xca>
 35a:	22 b3       	in	r18, 0x12	; 18
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_vSet_Pin_Value+0xbe>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_vSet_Pin_Value+0xba>
 36a:	80 95       	com	r24
 36c:	82 23       	and	r24, r18
 36e:	82 bb       	out	0x12, r24	; 18
 370:	08 95       	ret
 372:	22 b3       	in	r18, 0x12	; 18
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_vSet_Pin_Value+0xd6>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	6a 95       	dec	r22
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_vSet_Pin_Value+0xd2>
 382:	82 2b       	or	r24, r18
 384:	82 bb       	out	0x12, r24	; 18
 386:	08 95       	ret

00000388 <DIO_vSet_Port_Value>:

//SETS THE WHOLE REGISTER , PORT'S

void DIO_vSet_Port_Value(u8 copy_u8PortName ,u8 copy_u8PortValue)
{
	switch (copy_u8PortName)
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	fc 01       	movw	r30, r24
 38c:	e1 54       	subi	r30, 0x41	; 65
 38e:	f1 09       	sbc	r31, r1
 390:	e4 32       	cpi	r30, 0x24	; 36
 392:	f1 05       	cpc	r31, r1
 394:	58 f4       	brcc	.+22     	; 0x3ac <DIO_vSet_Port_Value+0x24>
 396:	ee 58       	subi	r30, 0x8E	; 142
 398:	ff 4f       	sbci	r31, 0xFF	; 255
 39a:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__tablejump2__>
	{
		case'A':
		case 'a':
		WRITE_REG(PORTA,copy_u8PortValue);
 39e:	6b bb       	out	0x1b, r22	; 27
		break;
 3a0:	08 95       	ret
		case'B':
		case 'b':
		WRITE_REG(PORTB,copy_u8PortValue);
 3a2:	68 bb       	out	0x18, r22	; 24
		break;
 3a4:	08 95       	ret
		case'C':
		case 'c':
		WRITE_REG(PORTC,copy_u8PortValue);
 3a6:	65 bb       	out	0x15, r22	; 21
		break;
 3a8:	08 95       	ret
		case'D':
		case 'd':
		WRITE_REG(PORTD,copy_u8PortValue);
 3aa:	62 bb       	out	0x12, r22	; 18
 3ac:	08 95       	ret

000003ae <LCD_vEnable_Falling_Edge>:
	LCD_vSendCommand(copy_value);
	for (u8 i = 0 ; i < EIGHT ; i++)
	{
		LCD_vSendChar( Array[i] );
	}
}
 3ae:	41 e0       	ldi	r20, 0x01	; 1
 3b0:	61 e0       	ldi	r22, 0x01	; 1
 3b2:	83 e4       	ldi	r24, 0x43	; 67
 3b4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DIO_vSet_Pin_Value>
 3b8:	89 ef       	ldi	r24, 0xF9	; 249
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <LCD_vEnable_Falling_Edge+0xe>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <LCD_vEnable_Falling_Edge+0x14>
 3c2:	00 00       	nop
 3c4:	40 e0       	ldi	r20, 0x00	; 0
 3c6:	61 e0       	ldi	r22, 0x01	; 1
 3c8:	83 e4       	ldi	r24, 0x43	; 67
 3ca:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DIO_vSet_Pin_Value>
 3ce:	08 95       	ret

000003d0 <LCD_vSendCommand>:
 3d0:	cf 93       	push	r28
 3d2:	c8 2f       	mov	r28, r24
 3d4:	40 e0       	ldi	r20, 0x00	; 0
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	83 e4       	ldi	r24, 0x43	; 67
 3da:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DIO_vSet_Pin_Value>
 3de:	6c 2f       	mov	r22, r28
 3e0:	82 e4       	ldi	r24, 0x42	; 66
 3e2:	0e 94 c4 01 	call	0x388	; 0x388 <DIO_vSet_Port_Value>
 3e6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_vEnable_Falling_Edge>
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <LCD_vInit>:
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	64 e0       	ldi	r22, 0x04	; 4
 3f2:	82 e4       	ldi	r24, 0x42	; 66
 3f4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_vSet_Pin_Direction>
 3f8:	41 e0       	ldi	r20, 0x01	; 1
 3fa:	65 e0       	ldi	r22, 0x05	; 5
 3fc:	82 e4       	ldi	r24, 0x42	; 66
 3fe:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_vSet_Pin_Direction>
 402:	41 e0       	ldi	r20, 0x01	; 1
 404:	66 e0       	ldi	r22, 0x06	; 6
 406:	82 e4       	ldi	r24, 0x42	; 66
 408:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_vSet_Pin_Direction>
 40c:	41 e0       	ldi	r20, 0x01	; 1
 40e:	67 e0       	ldi	r22, 0x07	; 7
 410:	82 e4       	ldi	r24, 0x42	; 66
 412:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_vSet_Pin_Direction>
 416:	41 e0       	ldi	r20, 0x01	; 1
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	83 e4       	ldi	r24, 0x43	; 67
 41c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_vSet_Pin_Direction>
 420:	41 e0       	ldi	r20, 0x01	; 1
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	83 e4       	ldi	r24, 0x43	; 67
 426:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_vSet_Pin_Direction>
 42a:	8f e0       	ldi	r24, 0x0F	; 15
 42c:	97 e2       	ldi	r25, 0x27	; 39
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 432:	00 c0       	rjmp	.+0      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 434:	00 00       	nop
 436:	80 e2       	ldi	r24, 0x20	; 32
 438:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_vSendCommand>
 43c:	80 e2       	ldi	r24, 0x20	; 32
 43e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_vSendCommand>
 442:	80 e8       	ldi	r24, 0x80	; 128
 444:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_vSendCommand>
 448:	9d e0       	ldi	r25, 0x0D	; 13
 44a:	9a 95       	dec	r25
 44c:	f1 f7       	brne	.-4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 44e:	00 00       	nop
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_vSendCommand>
 456:	80 ef       	ldi	r24, 0xF0	; 240
 458:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_vSendCommand>
 45c:	8d e0       	ldi	r24, 0x0D	; 13
 45e:	8a 95       	dec	r24
 460:	f1 f7       	brne	.-4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 462:	00 00       	nop
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_vSendCommand>
 46a:	80 e1       	ldi	r24, 0x10	; 16
 46c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_vSendCommand>
 470:	83 ef       	ldi	r24, 0xF3	; 243
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 478:	00 c0       	rjmp	.+0      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 47a:	00 00       	nop
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_vSendCommand>
 482:	80 e4       	ldi	r24, 0x40	; 64
 484:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_vSendCommand>
 488:	08 95       	ret

0000048a <LCD_vSendChar>:
 48a:	cf 93       	push	r28
 48c:	c8 2f       	mov	r28, r24
 48e:	41 e0       	ldi	r20, 0x01	; 1
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	83 e4       	ldi	r24, 0x43	; 67
 494:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DIO_vSet_Pin_Value>
 498:	6c 2f       	mov	r22, r28
 49a:	60 7f       	andi	r22, 0xF0	; 240
 49c:	82 e4       	ldi	r24, 0x42	; 66
 49e:	0e 94 c4 01 	call	0x388	; 0x388 <DIO_vSet_Port_Value>
 4a2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_vEnable_Falling_Edge>
 4a6:	89 ef       	ldi	r24, 0xF9	; 249
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <LCD_vSendChar+0x20>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <LCD_vSendChar+0x26>
 4b0:	00 00       	nop
 4b2:	6c 2f       	mov	r22, r28
 4b4:	62 95       	swap	r22
 4b6:	60 7f       	andi	r22, 0xF0	; 240
 4b8:	82 e4       	ldi	r24, 0x42	; 66
 4ba:	0e 94 c4 01 	call	0x388	; 0x388 <DIO_vSet_Port_Value>
 4be:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_vEnable_Falling_Edge>
 4c2:	83 ef       	ldi	r24, 0xF3	; 243
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <LCD_vSendChar+0x3c>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <LCD_vSendChar+0x42>
 4cc:	00 00       	nop
 4ce:	cf 91       	pop	r28
 4d0:	08 95       	ret

000004d2 <LCD_vSendString>:
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	ec 01       	movw	r28, r24
 4d8:	03 c0       	rjmp	.+6      	; 0x4e0 <LCD_vSendString+0xe>
 4da:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_vSendChar>
 4de:	21 96       	adiw	r28, 0x01	; 1
 4e0:	88 81       	ld	r24, Y
 4e2:	81 11       	cpse	r24, r1
 4e4:	fa cf       	rjmp	.-12     	; 0x4da <LCD_vSendString+0x8>
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	08 95       	ret

000004ec <LCD_vMoveCursor>:
 4ec:	cf 93       	push	r28
 4ee:	81 11       	cpse	r24, r1
 4f0:	60 5c       	subi	r22, 0xC0	; 192
 4f2:	c0 e8       	ldi	r28, 0x80	; 128
 4f4:	c6 0f       	add	r28, r22
 4f6:	8c 2f       	mov	r24, r28
 4f8:	80 7f       	andi	r24, 0xF0	; 240
 4fa:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_vSendCommand>
 4fe:	8c 2f       	mov	r24, r28
 500:	82 95       	swap	r24
 502:	80 7f       	andi	r24, 0xF0	; 240
 504:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_vSendCommand>
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <LCD_u16Get_Lengh_Of_Number>:
//valid
u16 LCD_u16Get_Lengh_Of_Number(u16 Copy_u16Number)
{
 50c:	9c 01       	movw	r18, r24
	u16 Length = (Copy_u16Number == 0? 1 :0);
 50e:	41 e0       	ldi	r20, 0x01	; 1
 510:	89 2b       	or	r24, r25
 512:	09 f0       	breq	.+2      	; 0x516 <LCD_u16Get_Lengh_Of_Number+0xa>
 514:	40 e0       	ldi	r20, 0x00	; 0
 516:	50 e0       	ldi	r21, 0x00	; 0
	while(Copy_u16Number>0)
 518:	0d c0       	rjmp	.+26     	; 0x534 <LCD_u16Get_Lengh_Of_Number+0x28>
	{
		Length++;
 51a:	4f 5f       	subi	r20, 0xFF	; 255
 51c:	5f 4f       	sbci	r21, 0xFF	; 255
		Copy_u16Number/=10;
 51e:	ad ec       	ldi	r26, 0xCD	; 205
 520:	bc ec       	ldi	r27, 0xCC	; 204
 522:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__umulhisi3>
 526:	9c 01       	movw	r18, r24
 528:	36 95       	lsr	r19
 52a:	27 95       	ror	r18
 52c:	36 95       	lsr	r19
 52e:	27 95       	ror	r18
 530:	36 95       	lsr	r19
 532:	27 95       	ror	r18
}
//valid
u16 LCD_u16Get_Lengh_Of_Number(u16 Copy_u16Number)
{
	u16 Length = (Copy_u16Number == 0? 1 :0);
	while(Copy_u16Number>0)
 534:	21 15       	cp	r18, r1
 536:	31 05       	cpc	r19, r1
 538:	81 f7       	brne	.-32     	; 0x51a <LCD_u16Get_Lengh_Of_Number+0xe>
	{
		Length++;
		Copy_u16Number/=10;
	}
	return Length;
}
 53a:	ca 01       	movw	r24, r20
 53c:	08 95       	ret

0000053e <LCD_vSendNumber>:
//valid
void LCD_vSendNumber(u16 Copy_u8Number)
{
 53e:	0f 93       	push	r16
 540:	1f 93       	push	r17
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	cd b7       	in	r28, 0x3d	; 61
 548:	de b7       	in	r29, 0x3e	; 62
 54a:	60 97       	sbiw	r28, 0x10	; 16
 54c:	0f b6       	in	r0, 0x3f	; 63
 54e:	f8 94       	cli
 550:	de bf       	out	0x3e, r29	; 62
 552:	0f be       	out	0x3f, r0	; 63
 554:	cd bf       	out	0x3d, r28	; 61
 556:	8c 01       	movw	r16, r24
	u8 str[16];
	u16 i=0;
	u16 length = LCD_u16Get_Lengh_Of_Number(Copy_u8Number);
 558:	0e 94 86 02 	call	0x50c	; 0x50c <LCD_u16Get_Lengh_Of_Number>
 55c:	fc 01       	movw	r30, r24
}
//valid
void LCD_vSendNumber(u16 Copy_u8Number)
{
	u8 str[16];
	u16 i=0;
 55e:	40 e0       	ldi	r20, 0x00	; 0
 560:	50 e0       	ldi	r21, 0x00	; 0
	u16 length = LCD_u16Get_Lengh_Of_Number(Copy_u8Number);

	while(length > 0)
 562:	31 c0       	rjmp	.+98     	; 0x5c6 <LCD_vSendNumber+0x88>
	{
		u8 digit = Copy_u8Number%10;
 564:	98 01       	movw	r18, r16
 566:	ad ec       	ldi	r26, 0xCD	; 205
 568:	bc ec       	ldi	r27, 0xCC	; 204
 56a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__umulhisi3>
 56e:	96 95       	lsr	r25
 570:	87 95       	ror	r24
 572:	96 95       	lsr	r25
 574:	87 95       	ror	r24
 576:	96 95       	lsr	r25
 578:	87 95       	ror	r24
 57a:	9c 01       	movw	r18, r24
 57c:	22 0f       	add	r18, r18
 57e:	33 1f       	adc	r19, r19
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	82 0f       	add	r24, r18
 58e:	93 1f       	adc	r25, r19
 590:	98 01       	movw	r18, r16
 592:	28 1b       	sub	r18, r24
 594:	39 0b       	sbc	r19, r25
 596:	c9 01       	movw	r24, r18
		str[i] = digit + '0';
 598:	a1 e0       	ldi	r26, 0x01	; 1
 59a:	b0 e0       	ldi	r27, 0x00	; 0
 59c:	ac 0f       	add	r26, r28
 59e:	bd 1f       	adc	r27, r29
 5a0:	a4 0f       	add	r26, r20
 5a2:	b5 1f       	adc	r27, r21
 5a4:	80 5d       	subi	r24, 0xD0	; 208
 5a6:	8c 93       	st	X, r24
		Copy_u8Number /= 10;
 5a8:	98 01       	movw	r18, r16
 5aa:	ad ec       	ldi	r26, 0xCD	; 205
 5ac:	bc ec       	ldi	r27, 0xCC	; 204
 5ae:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__umulhisi3>
 5b2:	8c 01       	movw	r16, r24
 5b4:	16 95       	lsr	r17
 5b6:	07 95       	ror	r16
 5b8:	16 95       	lsr	r17
 5ba:	07 95       	ror	r16
 5bc:	16 95       	lsr	r17
 5be:	07 95       	ror	r16
		length--;
 5c0:	31 97       	sbiw	r30, 0x01	; 1
		i++;
 5c2:	4f 5f       	subi	r20, 0xFF	; 255
 5c4:	5f 4f       	sbci	r21, 0xFF	; 255
{
	u8 str[16];
	u16 i=0;
	u16 length = LCD_u16Get_Lengh_Of_Number(Copy_u8Number);

	while(length > 0)
 5c6:	30 97       	sbiw	r30, 0x00	; 0
 5c8:	69 f6       	brne	.-102    	; 0x564 <LCD_vSendNumber+0x26>
		Copy_u8Number /= 10;
		length--;
		i++;
	}

	str[i] = '\0';
 5ca:	e1 e0       	ldi	r30, 0x01	; 1
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	ec 0f       	add	r30, r28
 5d0:	fd 1f       	adc	r31, r29
 5d2:	e4 0f       	add	r30, r20
 5d4:	f5 1f       	adc	r31, r21
 5d6:	10 82       	st	Z, r1

	u16 start = 0;
	u16 end = i - 1;
 5d8:	ca 01       	movw	r24, r20
 5da:	01 97       	sbiw	r24, 0x01	; 1
		i++;
	}

	str[i] = '\0';

	u16 start = 0;
 5dc:	20 e0       	ldi	r18, 0x00	; 0
 5de:	30 e0       	ldi	r19, 0x00	; 0
	u16 end = i - 1;
	while (start < end)
 5e0:	13 c0       	rjmp	.+38     	; 0x608 <LCD_vSendNumber+0xca>
	{
		u8 temp = str[start];
 5e2:	a1 e0       	ldi	r26, 0x01	; 1
 5e4:	b0 e0       	ldi	r27, 0x00	; 0
 5e6:	ac 0f       	add	r26, r28
 5e8:	bd 1f       	adc	r27, r29
 5ea:	a2 0f       	add	r26, r18
 5ec:	b3 1f       	adc	r27, r19
 5ee:	4c 91       	ld	r20, X
		str[start] = str[end];
 5f0:	e1 e0       	ldi	r30, 0x01	; 1
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	ec 0f       	add	r30, r28
 5f6:	fd 1f       	adc	r31, r29
 5f8:	e8 0f       	add	r30, r24
 5fa:	f9 1f       	adc	r31, r25
 5fc:	50 81       	ld	r21, Z
 5fe:	5c 93       	st	X, r21
		str[end] = temp;
 600:	40 83       	st	Z, r20
		start++;
 602:	2f 5f       	subi	r18, 0xFF	; 255
 604:	3f 4f       	sbci	r19, 0xFF	; 255
		end--;
 606:	01 97       	sbiw	r24, 0x01	; 1

	str[i] = '\0';

	u16 start = 0;
	u16 end = i - 1;
	while (start < end)
 608:	28 17       	cp	r18, r24
 60a:	39 07       	cpc	r19, r25
 60c:	50 f3       	brcs	.-44     	; 0x5e2 <LCD_vSendNumber+0xa4>
 60e:	00 e0       	ldi	r16, 0x00	; 0
 610:	10 e0       	ldi	r17, 0x00	; 0
 612:	0a c0       	rjmp	.+20     	; 0x628 <LCD_vSendNumber+0xea>
		end--;
	}
	u16 j=0;
	while(str[j] != '\0')
	{
		if (str[j]==0)
 614:	81 11       	cpse	r24, r1
 616:	04 c0       	rjmp	.+8      	; 0x620 <LCD_vSendNumber+0xe2>
		LCD_vSendChar('0');
 618:	80 e3       	ldi	r24, 0x30	; 48
 61a:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_vSendChar>
 61e:	02 c0       	rjmp	.+4      	; 0x624 <LCD_vSendNumber+0xe6>
		else
		LCD_vSendChar(str[j]);
 620:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_vSendChar>
		j++;
 624:	0f 5f       	subi	r16, 0xFF	; 255
 626:	1f 4f       	sbci	r17, 0xFF	; 255
		str[end] = temp;
		start++;
		end--;
	}
	u16 j=0;
	while(str[j] != '\0')
 628:	e1 e0       	ldi	r30, 0x01	; 1
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	ec 0f       	add	r30, r28
 62e:	fd 1f       	adc	r31, r29
 630:	e0 0f       	add	r30, r16
 632:	f1 1f       	adc	r31, r17
 634:	80 81       	ld	r24, Z
 636:	81 11       	cpse	r24, r1
 638:	ed cf       	rjmp	.-38     	; 0x614 <LCD_vSendNumber+0xd6>
		else
		LCD_vSendChar(str[j]);
		j++;
		
	}
}
 63a:	60 96       	adiw	r28, 0x10	; 16
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	f8 94       	cli
 640:	de bf       	out	0x3e, r29	; 62
 642:	0f be       	out	0x3f, r0	; 63
 644:	cd bf       	out	0x3d, r28	; 61
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	1f 91       	pop	r17
 64c:	0f 91       	pop	r16
 64e:	08 95       	ret

00000650 <LED_vTurnOnLED>:
	
}

void LED_vToggle_Led(u8 copy_PORT_NAME,u8 copy_PIN_NUMBER)
{
	DIO_vToggle_Pin_Value(copy_PORT_NAME,copy_PIN_NUMBER);
 650:	cf 93       	push	r28
 652:	df 93       	push	r29
 654:	c8 2f       	mov	r28, r24
 656:	d6 2f       	mov	r29, r22
 658:	41 e0       	ldi	r20, 0x01	; 1
 65a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_vSet_Pin_Direction>
 65e:	41 e0       	ldi	r20, 0x01	; 1
 660:	6d 2f       	mov	r22, r29
 662:	8c 2f       	mov	r24, r28
 664:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DIO_vSet_Pin_Value>
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	08 95       	ret

0000066e <LED_vTurnOffLED>:
 66e:	cf 93       	push	r28
 670:	df 93       	push	r29
 672:	c8 2f       	mov	r28, r24
 674:	d6 2f       	mov	r29, r22
 676:	41 e0       	ldi	r20, 0x01	; 1
 678:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_vSet_Pin_Direction>
 67c:	40 e0       	ldi	r20, 0x00	; 0
 67e:	6d 2f       	mov	r22, r29
 680:	8c 2f       	mov	r24, r28
 682:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DIO_vSet_Pin_Value>
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	08 95       	ret

0000068c <LED_vBlink_Led>:
	
}
//this function blinks the led for 3 iterations with delay of half second 
void LED_vBlink_Led(u8 copy_PORT_NAME , u8 copy_PIN_NUMBER)
{
 68c:	0f 93       	push	r16
 68e:	1f 93       	push	r17
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	08 2f       	mov	r16, r24
 696:	16 2f       	mov	r17, r22
	for (int i = 0 ; i < 3 ; i++ )
 698:	c0 e0       	ldi	r28, 0x00	; 0
 69a:	d0 e0       	ldi	r29, 0x00	; 0
 69c:	1b c0       	rjmp	.+54     	; 0x6d4 <LED_vBlink_Led+0x48>
	{
			LED_vTurnOnLED(copy_PORT_NAME,copy_PIN_NUMBER);
 69e:	61 2f       	mov	r22, r17
 6a0:	80 2f       	mov	r24, r16
 6a2:	0e 94 28 03 	call	0x650	; 0x650 <LED_vTurnOnLED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6a6:	2f e9       	ldi	r18, 0x9F	; 159
 6a8:	86 e8       	ldi	r24, 0x86	; 134
 6aa:	91 e0       	ldi	r25, 0x01	; 1
 6ac:	21 50       	subi	r18, 0x01	; 1
 6ae:	80 40       	sbci	r24, 0x00	; 0
 6b0:	90 40       	sbci	r25, 0x00	; 0
 6b2:	e1 f7       	brne	.-8      	; 0x6ac <LED_vBlink_Led+0x20>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <LED_vBlink_Led+0x2a>
 6b6:	00 00       	nop
			_delay_ms(500);
			LED_vTurnOffLED(copy_PORT_NAME,copy_PIN_NUMBER);
 6b8:	61 2f       	mov	r22, r17
 6ba:	80 2f       	mov	r24, r16
 6bc:	0e 94 37 03 	call	0x66e	; 0x66e <LED_vTurnOffLED>
 6c0:	2f e9       	ldi	r18, 0x9F	; 159
 6c2:	86 e8       	ldi	r24, 0x86	; 134
 6c4:	91 e0       	ldi	r25, 0x01	; 1
 6c6:	21 50       	subi	r18, 0x01	; 1
 6c8:	80 40       	sbci	r24, 0x00	; 0
 6ca:	90 40       	sbci	r25, 0x00	; 0
 6cc:	e1 f7       	brne	.-8      	; 0x6c6 <LED_vBlink_Led+0x3a>
 6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <LED_vBlink_Led+0x44>
 6d0:	00 00       	nop
	
}
//this function blinks the led for 3 iterations with delay of half second 
void LED_vBlink_Led(u8 copy_PORT_NAME , u8 copy_PIN_NUMBER)
{
	for (int i = 0 ; i < 3 ; i++ )
 6d2:	21 96       	adiw	r28, 0x01	; 1
 6d4:	c3 30       	cpi	r28, 0x03	; 3
 6d6:	d1 05       	cpc	r29, r1
 6d8:	14 f3       	brlt	.-60     	; 0x69e <LED_vBlink_Led+0x12>
			_delay_ms(500);
			LED_vTurnOffLED(copy_PORT_NAME,copy_PIN_NUMBER);
			_delay_ms(500);
	}

}
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	1f 91       	pop	r17
 6e0:	0f 91       	pop	r16
 6e2:	08 95       	ret

000006e4 <main>:
#include "UART.h"
#include <util/delay.h>


int main(void)
{
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
 6e8:	cd b7       	in	r28, 0x3d	; 61
 6ea:	de b7       	in	r29, 0x3e	; 62
 6ec:	64 97       	sbiw	r28, 0x14	; 20
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	f8 94       	cli
 6f2:	de bf       	out	0x3e, r29	; 62
 6f4:	0f be       	out	0x3f, r0	; 63
 6f6:	cd bf       	out	0x3d, r28	; 61
	
	//setting dirn of ports
	DIO_vSet_Pin_Direction('c',PIN_NO_4,OUTPUT);//IN1
 6f8:	41 e0       	ldi	r20, 0x01	; 1
 6fa:	64 e0       	ldi	r22, 0x04	; 4
 6fc:	83 e6       	ldi	r24, 0x63	; 99
 6fe:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_vSet_Pin_Direction>
	DIO_vSet_Pin_Direction('c',PIN_NO_5,OUTPUT);//IN2
 702:	41 e0       	ldi	r20, 0x01	; 1
 704:	65 e0       	ldi	r22, 0x05	; 5
 706:	83 e6       	ldi	r24, 0x63	; 99
 708:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_vSet_Pin_Direction>
	
	//OUTPutting high or low on the two pins
	//ANTI_clockwise
	DIO_vSet_Pin_Value('c',PIN_NO_4,ONE);//IN1 == HIGH
 70c:	41 e0       	ldi	r20, 0x01	; 1
 70e:	64 e0       	ldi	r22, 0x04	; 4
 710:	83 e6       	ldi	r24, 0x63	; 99
 712:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DIO_vSet_Pin_Value>
	DIO_vSet_Pin_Value('c',PIN_NO_5,ZERO);//IN2 == LOW
 716:	40 e0       	ldi	r20, 0x00	; 0
 718:	65 e0       	ldi	r22, 0x05	; 5
 71a:	83 e6       	ldi	r24, 0x63	; 99
 71c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DIO_vSet_Pin_Value>
	
	//Intitialization of Fast mode PWM Timer1 for Servo Motor 
	PWM_vInit_T1_FastMode();
 720:	0e 94 e6 04 	call	0x9cc	; 0x9cc <PWM_vInit_T1_FastMode>

	//ICR1 value assignment for PWM1 for Servo Motor
	PWM_vSetValue_ICR1_T1_Manual(2499);
 724:	83 ec       	ldi	r24, 0xC3	; 195
 726:	99 e0       	ldi	r25, 0x09	; 9
 728:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <PWM_vSetValue_ICR1_T1_Manual>
	
	//Prescaler for Timer0
	PWM_vSetPreScaler_T0(PRESCALE_64);
 72c:	83 e0       	ldi	r24, 0x03	; 3
 72e:	0e 94 8a 04 	call	0x914	; 0x914 <PWM_vSetPreScaler_T0>
	
	//Intitialization for Fast PWM Timer0 for DC Motor
	PWM_vSetMode_T0(FAST_PWM,OC1A_CLR_ON_COMP_UP_COUNT);
 732:	62 e0       	ldi	r22, 0x02	; 2
 734:	83 e0       	ldi	r24, 0x03	; 3
 736:	0e 94 34 04 	call	0x868	; 0x868 <PWM_vSetMode_T0>

	//ADC Initialization
	ADC_vInit_();
 73a:	0e 94 cb 00 	call	0x196	; 0x196 <ADC_vInit_>
	
	//LCD Initialization
	LCD_vInit();
 73e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <LCD_vInit>
	
	//Initializing the UART 
	UART_vInit();
 742:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <UART_vInit>
	
	//LCD Strings to print
	u8 str1[] = "Hello!room Temp" ;
 746:	80 e1       	ldi	r24, 0x10	; 16
 748:	e0 e6       	ldi	r30, 0x60	; 96
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	de 01       	movw	r26, r28
 74e:	11 96       	adiw	r26, 0x01	; 1
 750:	01 90       	ld	r0, Z+
 752:	0d 92       	st	X+, r0
 754:	8a 95       	dec	r24
 756:	e1 f7       	brne	.-8      	; 0x750 <main+0x6c>
	u8 str2[] = " = ";
 758:	80 e2       	ldi	r24, 0x20	; 32
 75a:	9d e3       	ldi	r25, 0x3D	; 61
 75c:	9a 8b       	std	Y+18, r25	; 0x12
 75e:	89 8b       	std	Y+17, r24	; 0x11
 760:	80 e2       	ldi	r24, 0x20	; 32
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	9c 8b       	std	Y+20, r25	; 0x14
 766:	8b 8b       	std	Y+19, r24	; 0x13
 768:	2f ef       	ldi	r18, 0xFF	; 255
 76a:	80 e7       	ldi	r24, 0x70	; 112
 76c:	92 e0       	ldi	r25, 0x02	; 2
 76e:	21 50       	subi	r18, 0x01	; 1
 770:	80 40       	sbci	r24, 0x00	; 0
 772:	90 40       	sbci	r25, 0x00	; 0
 774:	e1 f7       	brne	.-8      	; 0x76e <main+0x8a>
 776:	00 c0       	rjmp	.+0      	; 0x778 <main+0x94>
 778:	00 00       	nop
	u16 copy_u16celsius ;
	
	
	//printing "Hello!room Temp = "
	_delay_ms(100);
	LCD_vSendString(str1);
 77a:	ce 01       	movw	r24, r28
 77c:	01 96       	adiw	r24, 0x01	; 1
 77e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_vSendString>
	LCD_vMoveCursor(1,3);
 782:	63 e0       	ldi	r22, 0x03	; 3
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_vMoveCursor>
	LCD_vSendString(str2);
 78a:	ce 01       	movw	r24, r28
 78c:	41 96       	adiw	r24, 0x11	; 17
 78e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_vSendString>
 792:	2f ef       	ldi	r18, 0xFF	; 255
 794:	84 e3       	ldi	r24, 0x34	; 52
 796:	9c e0       	ldi	r25, 0x0C	; 12
 798:	21 50       	subi	r18, 0x01	; 1
 79a:	80 40       	sbci	r24, 0x00	; 0
 79c:	90 40       	sbci	r25, 0x00	; 0
 79e:	e1 f7       	brne	.-8      	; 0x798 <main+0xb4>
 7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <main+0xbe>
 7a2:	00 00       	nop
	
    while (1) 
    {
		_delay_ms(500);
		copy_u16Conversion = ADC_u16Read_Value();
 7a4:	0e 94 bc 00 	call	0x178	; 0x178 <ADC_u16Read_Value>
		
		//Calibrating the sensor by multiplying it by 4.88 then divide it by 10 celsius
		copy_u16celsius = ( (copy_u16Conversion * 4.88) / 10.00 ) ;
 7a8:	bc 01       	movw	r22, r24
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 ac 05 	call	0xb58	; 0xb58 <__floatunsisf>
 7b2:	26 ef       	ldi	r18, 0xF6	; 246
 7b4:	38 e2       	ldi	r19, 0x28	; 40
 7b6:	4c e9       	ldi	r20, 0x9C	; 156
 7b8:	50 e4       	ldi	r21, 0x40	; 64
 7ba:	0e 94 3a 06 	call	0xc74	; 0xc74 <__mulsf3>
 7be:	20 e0       	ldi	r18, 0x00	; 0
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	40 e2       	ldi	r20, 0x20	; 32
 7c4:	51 e4       	ldi	r21, 0x41	; 65
 7c6:	0e 94 0b 05 	call	0xa16	; 0xa16 <__divsf3>
 7ca:	0e 94 7d 05 	call	0xafa	; 0xafa <__fixunssfsi>
 7ce:	6b 01       	movw	r12, r22
 7d0:	7c 01       	movw	r14, r24
 7d2:	8b 01       	movw	r16, r22
		
		//Moving Cursor to Display the Conversion in the 2nd row and 8th column
		LCD_vMoveCursor(1,7);
 7d4:	67 e0       	ldi	r22, 0x07	; 7
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_vMoveCursor>
		LCD_vSendNumber(copy_u16celsius);
 7dc:	c6 01       	movw	r24, r12
 7de:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_vSendNumber>
		
		//If the temperature is more than the normal room temperature the led will blink
		if(copy_u16celsius >= 25)
 7e2:	09 31       	cpi	r16, 0x19	; 25
 7e4:	11 05       	cpc	r17, r1
 7e6:	20 f0       	brcs	.+8      	; 0x7f0 <main+0x10c>
			LED_vBlink_Led('d',PIN_NO_7);
 7e8:	67 e0       	ldi	r22, 0x07	; 7
 7ea:	84 e6       	ldi	r24, 0x64	; 100
 7ec:	0e 94 46 03 	call	0x68c	; 0x68c <LED_vBlink_Led>
		
		
		
		//Receive Handshake Signal
		while (UART_u8GetData() != 'R');
 7f0:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_u8GetData>
 7f4:	82 35       	cpi	r24, 0x52	; 82
 7f6:	e1 f7       	brne	.-8      	; 0x7f0 <main+0x10c>
		// Send Acknowledgment
		UART_vSendData('A');
 7f8:	81 e4       	ldi	r24, 0x41	; 65
 7fa:	0e 94 03 05 	call	0xa06	; 0xa06 <UART_vSendData>
		
		//Switch On Actual Data Received
		switch (UART_u8GetData())
 7fe:	0e 94 07 05 	call	0xa0e	; 0xa0e <UART_u8GetData>
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	fc 01       	movw	r30, r24
 806:	f0 97       	sbiw	r30, 0x30	; 48
 808:	e7 30       	cpi	r30, 0x07	; 7
 80a:	f1 05       	cpc	r31, r1
 80c:	18 f5       	brcc	.+70     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 80e:	ea 56       	subi	r30, 0x6A	; 106
 810:	ff 4f       	sbci	r31, 0xFF	; 255
 812:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__tablejump2__>
		{
 			case '0' :
				//Open the Lights
				LED_vTurnOnLED('c',PIN_NO_2);
 816:	62 e0       	ldi	r22, 0x02	; 2
 818:	83 e6       	ldi	r24, 0x63	; 99
 81a:	0e 94 28 03 	call	0x650	; 0x650 <LED_vTurnOnLED>
 			break;
 81e:	1a c0       	rjmp	.+52     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 			case '1' :
 				//Open the door "Rotate 90 Degrees" ==> 5% duty cycle
				PWM_vSetValue_OCR1A_T1_Manual(187);
 820:	8b eb       	ldi	r24, 0xBB	; 187
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 94 f6 04 	call	0x9ec	; 0x9ec <PWM_vSetValue_OCR1A_T1_Manual>
 			break;
 828:	15 c0       	rjmp	.+42     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 			case '2' :
 				//Close the door "Rotate 0 Degrees" ==> 7.5% duty cycle
 				PWM_vSetValue_OCR1A_T1_Manual(125);
 82a:	8d e7       	ldi	r24, 0x7D	; 125
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <PWM_vSetValue_OCR1A_T1_Manual>
			break;
 832:	10 c0       	rjmp	.+32     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
			case '3' :
				//Close the Lights 
				LED_vTurnOffLED('c',PIN_NO_2);
 834:	62 e0       	ldi	r22, 0x02	; 2
 836:	83 e6       	ldi	r24, 0x63	; 99
 838:	0e 94 37 03 	call	0x66e	; 0x66e <LED_vTurnOffLED>
			break;
 83c:	0b c0       	rjmp	.+22     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 			case '4' :
 				//Open the fan 25% duty cycle
 				PWM_v_SetValue_T0_Manual(64);
 83e:	80 e4       	ldi	r24, 0x40	; 64
 840:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <PWM_v_SetValue_T0_Manual>
 			break;
 844:	07 c0       	rjmp	.+14     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 			case '5' :
 				//Open the fan 50% duty cycle
 				PWM_v_SetValue_T0_Manual(128);
 846:	80 e8       	ldi	r24, 0x80	; 128
 848:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <PWM_v_SetValue_T0_Manual>
			 break;
 84c:	03 c0       	rjmp	.+6      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 			case '6' :
 				//Open the fan 75% duty cycle
				PWM_v_SetValue_T0_Manual(192);
 84e:	80 ec       	ldi	r24, 0xC0	; 192
 850:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <PWM_v_SetValue_T0_Manual>
 854:	2f e7       	ldi	r18, 0x7F	; 127
 856:	88 e3       	ldi	r24, 0x38	; 56
 858:	91 e0       	ldi	r25, 0x01	; 1
 85a:	21 50       	subi	r18, 0x01	; 1
 85c:	80 40       	sbci	r24, 0x00	; 0
 85e:	90 40       	sbci	r25, 0x00	; 0
 860:	e1 f7       	brne	.-8      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 862:	00 c0       	rjmp	.+0      	; 0x864 <__stack+0x5>
 864:	00 00       	nop
 866:	95 cf       	rjmp	.-214    	; 0x792 <main+0xae>

00000868 <PWM_vSetMode_T0>:
}

void PWM_vSetValue_OCR1B_T1_Manual(u16 copy_u16Value)
{
	//WRITE_REG(OCR1B,copy_u16Value);
	OCR1B = copy_u16Value ;
 868:	81 30       	cpi	r24, 0x01	; 1
 86a:	61 f5       	brne	.+88     	; 0x8c4 <PWM_vSetMode_T0+0x5c>
 86c:	93 b7       	in	r25, 0x33	; 51
 86e:	97 7f       	andi	r25, 0xF7	; 247
 870:	93 bf       	out	0x33, r25	; 51
 872:	93 b7       	in	r25, 0x33	; 51
 874:	90 64       	ori	r25, 0x40	; 64
 876:	93 bf       	out	0x33, r25	; 51
 878:	99 b7       	in	r25, 0x39	; 57
 87a:	9e 7f       	andi	r25, 0xFE	; 254
 87c:	99 bf       	out	0x39, r25	; 57
 87e:	99 b7       	in	r25, 0x39	; 57
 880:	9d 7f       	andi	r25, 0xFD	; 253
 882:	99 bf       	out	0x39, r25	; 57
 884:	98 b7       	in	r25, 0x38	; 56
 886:	9e 7f       	andi	r25, 0xFE	; 254
 888:	98 bf       	out	0x38, r25	; 56
 88a:	98 b7       	in	r25, 0x38	; 56
 88c:	9d 7f       	andi	r25, 0xFD	; 253
 88e:	98 bf       	out	0x38, r25	; 56
 890:	62 30       	cpi	r22, 0x02	; 2
 892:	59 f0       	breq	.+22     	; 0x8aa <PWM_vSetMode_T0+0x42>
 894:	63 30       	cpi	r22, 0x03	; 3
 896:	81 f0       	breq	.+32     	; 0x8b8 <PWM_vSetMode_T0+0x50>
 898:	61 11       	cpse	r22, r1
 89a:	14 c0       	rjmp	.+40     	; 0x8c4 <PWM_vSetMode_T0+0x5c>
 89c:	93 b7       	in	r25, 0x33	; 51
 89e:	9f 7e       	andi	r25, 0xEF	; 239
 8a0:	93 bf       	out	0x33, r25	; 51
 8a2:	93 b7       	in	r25, 0x33	; 51
 8a4:	9f 7d       	andi	r25, 0xDF	; 223
 8a6:	93 bf       	out	0x33, r25	; 51
 8a8:	0d c0       	rjmp	.+26     	; 0x8c4 <PWM_vSetMode_T0+0x5c>
 8aa:	93 b7       	in	r25, 0x33	; 51
 8ac:	9f 7e       	andi	r25, 0xEF	; 239
 8ae:	93 bf       	out	0x33, r25	; 51
 8b0:	93 b7       	in	r25, 0x33	; 51
 8b2:	90 62       	ori	r25, 0x20	; 32
 8b4:	93 bf       	out	0x33, r25	; 51
 8b6:	06 c0       	rjmp	.+12     	; 0x8c4 <PWM_vSetMode_T0+0x5c>
 8b8:	93 b7       	in	r25, 0x33	; 51
 8ba:	90 61       	ori	r25, 0x10	; 16
 8bc:	93 bf       	out	0x33, r25	; 51
 8be:	93 b7       	in	r25, 0x33	; 51
 8c0:	90 62       	ori	r25, 0x20	; 32
 8c2:	93 bf       	out	0x33, r25	; 51
 8c4:	83 30       	cpi	r24, 0x03	; 3
 8c6:	01 f5       	brne	.+64     	; 0x908 <PWM_vSetMode_T0+0xa0>
 8c8:	83 b7       	in	r24, 0x33	; 51
 8ca:	88 60       	ori	r24, 0x08	; 8
 8cc:	83 bf       	out	0x33, r24	; 51
 8ce:	83 b7       	in	r24, 0x33	; 51
 8d0:	80 64       	ori	r24, 0x40	; 64
 8d2:	83 bf       	out	0x33, r24	; 51
 8d4:	62 30       	cpi	r22, 0x02	; 2
 8d6:	59 f0       	breq	.+22     	; 0x8ee <PWM_vSetMode_T0+0x86>
 8d8:	63 30       	cpi	r22, 0x03	; 3
 8da:	81 f0       	breq	.+32     	; 0x8fc <PWM_vSetMode_T0+0x94>
 8dc:	61 11       	cpse	r22, r1
 8de:	14 c0       	rjmp	.+40     	; 0x908 <PWM_vSetMode_T0+0xa0>
 8e0:	83 b7       	in	r24, 0x33	; 51
 8e2:	8f 7e       	andi	r24, 0xEF	; 239
 8e4:	83 bf       	out	0x33, r24	; 51
 8e6:	83 b7       	in	r24, 0x33	; 51
 8e8:	8f 7d       	andi	r24, 0xDF	; 223
 8ea:	83 bf       	out	0x33, r24	; 51
 8ec:	0d c0       	rjmp	.+26     	; 0x908 <PWM_vSetMode_T0+0xa0>
 8ee:	83 b7       	in	r24, 0x33	; 51
 8f0:	8f 7e       	andi	r24, 0xEF	; 239
 8f2:	83 bf       	out	0x33, r24	; 51
 8f4:	83 b7       	in	r24, 0x33	; 51
 8f6:	80 62       	ori	r24, 0x20	; 32
 8f8:	83 bf       	out	0x33, r24	; 51
 8fa:	06 c0       	rjmp	.+12     	; 0x908 <PWM_vSetMode_T0+0xa0>
 8fc:	83 b7       	in	r24, 0x33	; 51
 8fe:	80 61       	ori	r24, 0x10	; 16
 900:	83 bf       	out	0x33, r24	; 51
 902:	83 b7       	in	r24, 0x33	; 51
 904:	80 62       	ori	r24, 0x20	; 32
 906:	83 bf       	out	0x33, r24	; 51
 908:	41 e0       	ldi	r20, 0x01	; 1
 90a:	63 e0       	ldi	r22, 0x03	; 3
 90c:	82 e6       	ldi	r24, 0x62	; 98
 90e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_vSet_Pin_Direction>
 912:	08 95       	ret

00000914 <PWM_vSetPreScaler_T0>:
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	88 30       	cpi	r24, 0x08	; 8
 918:	91 05       	cpc	r25, r1
 91a:	08 f0       	brcs	.+2      	; 0x91e <PWM_vSetPreScaler_T0+0xa>
 91c:	54 c0       	rjmp	.+168    	; 0x9c6 <PWM_vSetPreScaler_T0+0xb2>
 91e:	fc 01       	movw	r30, r24
 920:	e3 56       	subi	r30, 0x63	; 99
 922:	ff 4f       	sbci	r31, 0xFF	; 255
 924:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__tablejump2__>
 928:	83 b7       	in	r24, 0x33	; 51
 92a:	8e 7f       	andi	r24, 0xFE	; 254
 92c:	83 bf       	out	0x33, r24	; 51
 92e:	83 b7       	in	r24, 0x33	; 51
 930:	8d 7f       	andi	r24, 0xFD	; 253
 932:	83 bf       	out	0x33, r24	; 51
 934:	83 b7       	in	r24, 0x33	; 51
 936:	8b 7f       	andi	r24, 0xFB	; 251
 938:	83 bf       	out	0x33, r24	; 51
 93a:	08 95       	ret
 93c:	83 b7       	in	r24, 0x33	; 51
 93e:	81 60       	ori	r24, 0x01	; 1
 940:	83 bf       	out	0x33, r24	; 51
 942:	83 b7       	in	r24, 0x33	; 51
 944:	8d 7f       	andi	r24, 0xFD	; 253
 946:	83 bf       	out	0x33, r24	; 51
 948:	83 b7       	in	r24, 0x33	; 51
 94a:	8b 7f       	andi	r24, 0xFB	; 251
 94c:	83 bf       	out	0x33, r24	; 51
 94e:	08 95       	ret
 950:	83 b7       	in	r24, 0x33	; 51
 952:	8e 7f       	andi	r24, 0xFE	; 254
 954:	83 bf       	out	0x33, r24	; 51
 956:	83 b7       	in	r24, 0x33	; 51
 958:	82 60       	ori	r24, 0x02	; 2
 95a:	83 bf       	out	0x33, r24	; 51
 95c:	83 b7       	in	r24, 0x33	; 51
 95e:	8b 7f       	andi	r24, 0xFB	; 251
 960:	83 bf       	out	0x33, r24	; 51
 962:	08 95       	ret
 964:	83 b7       	in	r24, 0x33	; 51
 966:	81 60       	ori	r24, 0x01	; 1
 968:	83 bf       	out	0x33, r24	; 51
 96a:	83 b7       	in	r24, 0x33	; 51
 96c:	82 60       	ori	r24, 0x02	; 2
 96e:	83 bf       	out	0x33, r24	; 51
 970:	83 b7       	in	r24, 0x33	; 51
 972:	8b 7f       	andi	r24, 0xFB	; 251
 974:	83 bf       	out	0x33, r24	; 51
 976:	08 95       	ret
 978:	83 b7       	in	r24, 0x33	; 51
 97a:	8e 7f       	andi	r24, 0xFE	; 254
 97c:	83 bf       	out	0x33, r24	; 51
 97e:	83 b7       	in	r24, 0x33	; 51
 980:	8d 7f       	andi	r24, 0xFD	; 253
 982:	83 bf       	out	0x33, r24	; 51
 984:	83 b7       	in	r24, 0x33	; 51
 986:	84 60       	ori	r24, 0x04	; 4
 988:	83 bf       	out	0x33, r24	; 51
 98a:	08 95       	ret
 98c:	83 b7       	in	r24, 0x33	; 51
 98e:	81 60       	ori	r24, 0x01	; 1
 990:	83 bf       	out	0x33, r24	; 51
 992:	83 b7       	in	r24, 0x33	; 51
 994:	8d 7f       	andi	r24, 0xFD	; 253
 996:	83 bf       	out	0x33, r24	; 51
 998:	83 b7       	in	r24, 0x33	; 51
 99a:	84 60       	ori	r24, 0x04	; 4
 99c:	83 bf       	out	0x33, r24	; 51
 99e:	08 95       	ret
 9a0:	83 b7       	in	r24, 0x33	; 51
 9a2:	8e 7f       	andi	r24, 0xFE	; 254
 9a4:	83 bf       	out	0x33, r24	; 51
 9a6:	83 b7       	in	r24, 0x33	; 51
 9a8:	82 60       	ori	r24, 0x02	; 2
 9aa:	83 bf       	out	0x33, r24	; 51
 9ac:	83 b7       	in	r24, 0x33	; 51
 9ae:	84 60       	ori	r24, 0x04	; 4
 9b0:	83 bf       	out	0x33, r24	; 51
 9b2:	08 95       	ret
 9b4:	83 b7       	in	r24, 0x33	; 51
 9b6:	81 60       	ori	r24, 0x01	; 1
 9b8:	83 bf       	out	0x33, r24	; 51
 9ba:	83 b7       	in	r24, 0x33	; 51
 9bc:	82 60       	ori	r24, 0x02	; 2
 9be:	83 bf       	out	0x33, r24	; 51
 9c0:	83 b7       	in	r24, 0x33	; 51
 9c2:	84 60       	ori	r24, 0x04	; 4
 9c4:	83 bf       	out	0x33, r24	; 51
 9c6:	08 95       	ret

000009c8 <PWM_v_SetValue_T0_Manual>:
 9c8:	8c bf       	out	0x3c, r24	; 60
 9ca:	08 95       	ret

000009cc <PWM_vInit_T1_FastMode>:
 9cc:	41 e0       	ldi	r20, 0x01	; 1
 9ce:	65 e0       	ldi	r22, 0x05	; 5
 9d0:	84 e6       	ldi	r24, 0x64	; 100
 9d2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_vSet_Pin_Direction>
 9d6:	1d bc       	out	0x2d, r1	; 45
 9d8:	1c bc       	out	0x2c, r1	; 44
 9da:	83 ec       	ldi	r24, 0xC3	; 195
 9dc:	99 e0       	ldi	r25, 0x09	; 9
 9de:	97 bd       	out	0x27, r25	; 39
 9e0:	86 bd       	out	0x26, r24	; 38
 9e2:	82 e8       	ldi	r24, 0x82	; 130
 9e4:	8f bd       	out	0x2f, r24	; 47
 9e6:	8b e1       	ldi	r24, 0x1B	; 27
 9e8:	8e bd       	out	0x2e, r24	; 46
 9ea:	08 95       	ret

000009ec <PWM_vSetValue_OCR1A_T1_Manual>:
 9ec:	9b bd       	out	0x2b, r25	; 43
 9ee:	8a bd       	out	0x2a, r24	; 42
 9f0:	08 95       	ret

000009f2 <PWM_vSetValue_ICR1_T1_Manual>:
}
void PWM_vSetValue_ICR1_T1_Manual(u16 copy_u16Value)
{
	//WRITE_REG(ICR1,copy_u16Value);
	ICR1 = copy_u16Value ;
 9f2:	97 bd       	out	0x27, r25	; 39
 9f4:	86 bd       	out	0x26, r24	; 38
 9f6:	08 95       	ret

000009f8 <UART_vInit>:
#include "Utils.h"
#include "UART_Private.h"
void UART_vInit(void)
{
	//enable tx & rx
	UCSRB = 0x18 ;
 9f8:	88 e1       	ldi	r24, 0x18	; 24
 9fa:	8a b9       	out	0x0a, r24	; 10
	//even parity ,8 bit , async , 1 stop bit
	USCRC = 0xA6 ;
 9fc:	86 ea       	ldi	r24, 0xA6	; 166
 9fe:	80 bd       	out	0x20, r24	; 32
	//baud rate = 9600 ,fcpu 8mhz
	UBRRL = 51 ;
 a00:	83 e3       	ldi	r24, 0x33	; 51
 a02:	89 b9       	out	0x09, r24	; 9
 a04:	08 95       	ret

00000a06 <UART_vSendData>:
	
}
void UART_vSendData(u8 copy_u8Data)
{
	while(READ_PIN(UCSRA,PIN_NO_5) == 0 );
 a06:	5d 9b       	sbis	0x0b, 5	; 11
 a08:	fe cf       	rjmp	.-4      	; 0xa06 <UART_vSendData>
	UDR = copy_u8Data ;
 a0a:	8c b9       	out	0x0c, r24	; 12
 a0c:	08 95       	ret

00000a0e <UART_u8GetData>:
	
}
u8 UART_u8GetData(void)
{
	while(READ_PIN(UCSRA,PIN_NO_7) == 0);
 a0e:	5f 9b       	sbis	0x0b, 7	; 11
 a10:	fe cf       	rjmp	.-4      	; 0xa0e <UART_u8GetData>
	return READ_WHOLE_REG(UDR);
 a12:	8c b1       	in	r24, 0x0c	; 12
}
 a14:	08 95       	ret

00000a16 <__divsf3>:
 a16:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__divsf3x>
 a1a:	0c 94 00 06 	jmp	0xc00	; 0xc00 <__fp_round>
 a1e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__fp_pscB>
 a22:	58 f0       	brcs	.+22     	; 0xa3a <__divsf3+0x24>
 a24:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fp_pscA>
 a28:	40 f0       	brcs	.+16     	; 0xa3a <__divsf3+0x24>
 a2a:	29 f4       	brne	.+10     	; 0xa36 <__divsf3+0x20>
 a2c:	5f 3f       	cpi	r21, 0xFF	; 255
 a2e:	29 f0       	breq	.+10     	; 0xa3a <__divsf3+0x24>
 a30:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__fp_inf>
 a34:	51 11       	cpse	r21, r1
 a36:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_szero>
 a3a:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__fp_nan>

00000a3e <__divsf3x>:
 a3e:	0e 94 11 06 	call	0xc22	; 0xc22 <__fp_split3>
 a42:	68 f3       	brcs	.-38     	; 0xa1e <__divsf3+0x8>

00000a44 <__divsf3_pse>:
 a44:	99 23       	and	r25, r25
 a46:	b1 f3       	breq	.-20     	; 0xa34 <__divsf3+0x1e>
 a48:	55 23       	and	r21, r21
 a4a:	91 f3       	breq	.-28     	; 0xa30 <__divsf3+0x1a>
 a4c:	95 1b       	sub	r25, r21
 a4e:	55 0b       	sbc	r21, r21
 a50:	bb 27       	eor	r27, r27
 a52:	aa 27       	eor	r26, r26
 a54:	62 17       	cp	r22, r18
 a56:	73 07       	cpc	r23, r19
 a58:	84 07       	cpc	r24, r20
 a5a:	38 f0       	brcs	.+14     	; 0xa6a <__divsf3_pse+0x26>
 a5c:	9f 5f       	subi	r25, 0xFF	; 255
 a5e:	5f 4f       	sbci	r21, 0xFF	; 255
 a60:	22 0f       	add	r18, r18
 a62:	33 1f       	adc	r19, r19
 a64:	44 1f       	adc	r20, r20
 a66:	aa 1f       	adc	r26, r26
 a68:	a9 f3       	breq	.-22     	; 0xa54 <__divsf3_pse+0x10>
 a6a:	35 d0       	rcall	.+106    	; 0xad6 <__divsf3_pse+0x92>
 a6c:	0e 2e       	mov	r0, r30
 a6e:	3a f0       	brmi	.+14     	; 0xa7e <__divsf3_pse+0x3a>
 a70:	e0 e8       	ldi	r30, 0x80	; 128
 a72:	32 d0       	rcall	.+100    	; 0xad8 <__divsf3_pse+0x94>
 a74:	91 50       	subi	r25, 0x01	; 1
 a76:	50 40       	sbci	r21, 0x00	; 0
 a78:	e6 95       	lsr	r30
 a7a:	00 1c       	adc	r0, r0
 a7c:	ca f7       	brpl	.-14     	; 0xa70 <__divsf3_pse+0x2c>
 a7e:	2b d0       	rcall	.+86     	; 0xad6 <__divsf3_pse+0x92>
 a80:	fe 2f       	mov	r31, r30
 a82:	29 d0       	rcall	.+82     	; 0xad6 <__divsf3_pse+0x92>
 a84:	66 0f       	add	r22, r22
 a86:	77 1f       	adc	r23, r23
 a88:	88 1f       	adc	r24, r24
 a8a:	bb 1f       	adc	r27, r27
 a8c:	26 17       	cp	r18, r22
 a8e:	37 07       	cpc	r19, r23
 a90:	48 07       	cpc	r20, r24
 a92:	ab 07       	cpc	r26, r27
 a94:	b0 e8       	ldi	r27, 0x80	; 128
 a96:	09 f0       	breq	.+2      	; 0xa9a <__divsf3_pse+0x56>
 a98:	bb 0b       	sbc	r27, r27
 a9a:	80 2d       	mov	r24, r0
 a9c:	bf 01       	movw	r22, r30
 a9e:	ff 27       	eor	r31, r31
 aa0:	93 58       	subi	r25, 0x83	; 131
 aa2:	5f 4f       	sbci	r21, 0xFF	; 255
 aa4:	3a f0       	brmi	.+14     	; 0xab4 <__divsf3_pse+0x70>
 aa6:	9e 3f       	cpi	r25, 0xFE	; 254
 aa8:	51 05       	cpc	r21, r1
 aaa:	78 f0       	brcs	.+30     	; 0xaca <__divsf3_pse+0x86>
 aac:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__fp_inf>
 ab0:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_szero>
 ab4:	5f 3f       	cpi	r21, 0xFF	; 255
 ab6:	e4 f3       	brlt	.-8      	; 0xab0 <__divsf3_pse+0x6c>
 ab8:	98 3e       	cpi	r25, 0xE8	; 232
 aba:	d4 f3       	brlt	.-12     	; 0xab0 <__divsf3_pse+0x6c>
 abc:	86 95       	lsr	r24
 abe:	77 95       	ror	r23
 ac0:	67 95       	ror	r22
 ac2:	b7 95       	ror	r27
 ac4:	f7 95       	ror	r31
 ac6:	9f 5f       	subi	r25, 0xFF	; 255
 ac8:	c9 f7       	brne	.-14     	; 0xabc <__divsf3_pse+0x78>
 aca:	88 0f       	add	r24, r24
 acc:	91 1d       	adc	r25, r1
 ace:	96 95       	lsr	r25
 ad0:	87 95       	ror	r24
 ad2:	97 f9       	bld	r25, 7
 ad4:	08 95       	ret
 ad6:	e1 e0       	ldi	r30, 0x01	; 1
 ad8:	66 0f       	add	r22, r22
 ada:	77 1f       	adc	r23, r23
 adc:	88 1f       	adc	r24, r24
 ade:	bb 1f       	adc	r27, r27
 ae0:	62 17       	cp	r22, r18
 ae2:	73 07       	cpc	r23, r19
 ae4:	84 07       	cpc	r24, r20
 ae6:	ba 07       	cpc	r27, r26
 ae8:	20 f0       	brcs	.+8      	; 0xaf2 <__divsf3_pse+0xae>
 aea:	62 1b       	sub	r22, r18
 aec:	73 0b       	sbc	r23, r19
 aee:	84 0b       	sbc	r24, r20
 af0:	ba 0b       	sbc	r27, r26
 af2:	ee 1f       	adc	r30, r30
 af4:	88 f7       	brcc	.-30     	; 0xad8 <__divsf3_pse+0x94>
 af6:	e0 95       	com	r30
 af8:	08 95       	ret

00000afa <__fixunssfsi>:
 afa:	0e 94 19 06 	call	0xc32	; 0xc32 <__fp_splitA>
 afe:	88 f0       	brcs	.+34     	; 0xb22 <__fixunssfsi+0x28>
 b00:	9f 57       	subi	r25, 0x7F	; 127
 b02:	98 f0       	brcs	.+38     	; 0xb2a <__fixunssfsi+0x30>
 b04:	b9 2f       	mov	r27, r25
 b06:	99 27       	eor	r25, r25
 b08:	b7 51       	subi	r27, 0x17	; 23
 b0a:	b0 f0       	brcs	.+44     	; 0xb38 <__fixunssfsi+0x3e>
 b0c:	e1 f0       	breq	.+56     	; 0xb46 <__fixunssfsi+0x4c>
 b0e:	66 0f       	add	r22, r22
 b10:	77 1f       	adc	r23, r23
 b12:	88 1f       	adc	r24, r24
 b14:	99 1f       	adc	r25, r25
 b16:	1a f0       	brmi	.+6      	; 0xb1e <__fixunssfsi+0x24>
 b18:	ba 95       	dec	r27
 b1a:	c9 f7       	brne	.-14     	; 0xb0e <__fixunssfsi+0x14>
 b1c:	14 c0       	rjmp	.+40     	; 0xb46 <__fixunssfsi+0x4c>
 b1e:	b1 30       	cpi	r27, 0x01	; 1
 b20:	91 f0       	breq	.+36     	; 0xb46 <__fixunssfsi+0x4c>
 b22:	0e 94 33 06 	call	0xc66	; 0xc66 <__fp_zero>
 b26:	b1 e0       	ldi	r27, 0x01	; 1
 b28:	08 95       	ret
 b2a:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__fp_zero>
 b2e:	67 2f       	mov	r22, r23
 b30:	78 2f       	mov	r23, r24
 b32:	88 27       	eor	r24, r24
 b34:	b8 5f       	subi	r27, 0xF8	; 248
 b36:	39 f0       	breq	.+14     	; 0xb46 <__fixunssfsi+0x4c>
 b38:	b9 3f       	cpi	r27, 0xF9	; 249
 b3a:	cc f3       	brlt	.-14     	; 0xb2e <__fixunssfsi+0x34>
 b3c:	86 95       	lsr	r24
 b3e:	77 95       	ror	r23
 b40:	67 95       	ror	r22
 b42:	b3 95       	inc	r27
 b44:	d9 f7       	brne	.-10     	; 0xb3c <__fixunssfsi+0x42>
 b46:	3e f4       	brtc	.+14     	; 0xb56 <__fixunssfsi+0x5c>
 b48:	90 95       	com	r25
 b4a:	80 95       	com	r24
 b4c:	70 95       	com	r23
 b4e:	61 95       	neg	r22
 b50:	7f 4f       	sbci	r23, 0xFF	; 255
 b52:	8f 4f       	sbci	r24, 0xFF	; 255
 b54:	9f 4f       	sbci	r25, 0xFF	; 255
 b56:	08 95       	ret

00000b58 <__floatunsisf>:
 b58:	e8 94       	clt
 b5a:	09 c0       	rjmp	.+18     	; 0xb6e <__floatsisf+0x12>

00000b5c <__floatsisf>:
 b5c:	97 fb       	bst	r25, 7
 b5e:	3e f4       	brtc	.+14     	; 0xb6e <__floatsisf+0x12>
 b60:	90 95       	com	r25
 b62:	80 95       	com	r24
 b64:	70 95       	com	r23
 b66:	61 95       	neg	r22
 b68:	7f 4f       	sbci	r23, 0xFF	; 255
 b6a:	8f 4f       	sbci	r24, 0xFF	; 255
 b6c:	9f 4f       	sbci	r25, 0xFF	; 255
 b6e:	99 23       	and	r25, r25
 b70:	a9 f0       	breq	.+42     	; 0xb9c <__floatsisf+0x40>
 b72:	f9 2f       	mov	r31, r25
 b74:	96 e9       	ldi	r25, 0x96	; 150
 b76:	bb 27       	eor	r27, r27
 b78:	93 95       	inc	r25
 b7a:	f6 95       	lsr	r31
 b7c:	87 95       	ror	r24
 b7e:	77 95       	ror	r23
 b80:	67 95       	ror	r22
 b82:	b7 95       	ror	r27
 b84:	f1 11       	cpse	r31, r1
 b86:	f8 cf       	rjmp	.-16     	; 0xb78 <__floatsisf+0x1c>
 b88:	fa f4       	brpl	.+62     	; 0xbc8 <__floatsisf+0x6c>
 b8a:	bb 0f       	add	r27, r27
 b8c:	11 f4       	brne	.+4      	; 0xb92 <__floatsisf+0x36>
 b8e:	60 ff       	sbrs	r22, 0
 b90:	1b c0       	rjmp	.+54     	; 0xbc8 <__floatsisf+0x6c>
 b92:	6f 5f       	subi	r22, 0xFF	; 255
 b94:	7f 4f       	sbci	r23, 0xFF	; 255
 b96:	8f 4f       	sbci	r24, 0xFF	; 255
 b98:	9f 4f       	sbci	r25, 0xFF	; 255
 b9a:	16 c0       	rjmp	.+44     	; 0xbc8 <__floatsisf+0x6c>
 b9c:	88 23       	and	r24, r24
 b9e:	11 f0       	breq	.+4      	; 0xba4 <__floatsisf+0x48>
 ba0:	96 e9       	ldi	r25, 0x96	; 150
 ba2:	11 c0       	rjmp	.+34     	; 0xbc6 <__floatsisf+0x6a>
 ba4:	77 23       	and	r23, r23
 ba6:	21 f0       	breq	.+8      	; 0xbb0 <__floatsisf+0x54>
 ba8:	9e e8       	ldi	r25, 0x8E	; 142
 baa:	87 2f       	mov	r24, r23
 bac:	76 2f       	mov	r23, r22
 bae:	05 c0       	rjmp	.+10     	; 0xbba <__floatsisf+0x5e>
 bb0:	66 23       	and	r22, r22
 bb2:	71 f0       	breq	.+28     	; 0xbd0 <__floatsisf+0x74>
 bb4:	96 e8       	ldi	r25, 0x86	; 134
 bb6:	86 2f       	mov	r24, r22
 bb8:	70 e0       	ldi	r23, 0x00	; 0
 bba:	60 e0       	ldi	r22, 0x00	; 0
 bbc:	2a f0       	brmi	.+10     	; 0xbc8 <__floatsisf+0x6c>
 bbe:	9a 95       	dec	r25
 bc0:	66 0f       	add	r22, r22
 bc2:	77 1f       	adc	r23, r23
 bc4:	88 1f       	adc	r24, r24
 bc6:	da f7       	brpl	.-10     	; 0xbbe <__floatsisf+0x62>
 bc8:	88 0f       	add	r24, r24
 bca:	96 95       	lsr	r25
 bcc:	87 95       	ror	r24
 bce:	97 f9       	bld	r25, 7
 bd0:	08 95       	ret

00000bd2 <__fp_inf>:
 bd2:	97 f9       	bld	r25, 7
 bd4:	9f 67       	ori	r25, 0x7F	; 127
 bd6:	80 e8       	ldi	r24, 0x80	; 128
 bd8:	70 e0       	ldi	r23, 0x00	; 0
 bda:	60 e0       	ldi	r22, 0x00	; 0
 bdc:	08 95       	ret

00000bde <__fp_nan>:
 bde:	9f ef       	ldi	r25, 0xFF	; 255
 be0:	80 ec       	ldi	r24, 0xC0	; 192
 be2:	08 95       	ret

00000be4 <__fp_pscA>:
 be4:	00 24       	eor	r0, r0
 be6:	0a 94       	dec	r0
 be8:	16 16       	cp	r1, r22
 bea:	17 06       	cpc	r1, r23
 bec:	18 06       	cpc	r1, r24
 bee:	09 06       	cpc	r0, r25
 bf0:	08 95       	ret

00000bf2 <__fp_pscB>:
 bf2:	00 24       	eor	r0, r0
 bf4:	0a 94       	dec	r0
 bf6:	12 16       	cp	r1, r18
 bf8:	13 06       	cpc	r1, r19
 bfa:	14 06       	cpc	r1, r20
 bfc:	05 06       	cpc	r0, r21
 bfe:	08 95       	ret

00000c00 <__fp_round>:
 c00:	09 2e       	mov	r0, r25
 c02:	03 94       	inc	r0
 c04:	00 0c       	add	r0, r0
 c06:	11 f4       	brne	.+4      	; 0xc0c <__fp_round+0xc>
 c08:	88 23       	and	r24, r24
 c0a:	52 f0       	brmi	.+20     	; 0xc20 <__fp_round+0x20>
 c0c:	bb 0f       	add	r27, r27
 c0e:	40 f4       	brcc	.+16     	; 0xc20 <__fp_round+0x20>
 c10:	bf 2b       	or	r27, r31
 c12:	11 f4       	brne	.+4      	; 0xc18 <__fp_round+0x18>
 c14:	60 ff       	sbrs	r22, 0
 c16:	04 c0       	rjmp	.+8      	; 0xc20 <__fp_round+0x20>
 c18:	6f 5f       	subi	r22, 0xFF	; 255
 c1a:	7f 4f       	sbci	r23, 0xFF	; 255
 c1c:	8f 4f       	sbci	r24, 0xFF	; 255
 c1e:	9f 4f       	sbci	r25, 0xFF	; 255
 c20:	08 95       	ret

00000c22 <__fp_split3>:
 c22:	57 fd       	sbrc	r21, 7
 c24:	90 58       	subi	r25, 0x80	; 128
 c26:	44 0f       	add	r20, r20
 c28:	55 1f       	adc	r21, r21
 c2a:	59 f0       	breq	.+22     	; 0xc42 <__fp_splitA+0x10>
 c2c:	5f 3f       	cpi	r21, 0xFF	; 255
 c2e:	71 f0       	breq	.+28     	; 0xc4c <__fp_splitA+0x1a>
 c30:	47 95       	ror	r20

00000c32 <__fp_splitA>:
 c32:	88 0f       	add	r24, r24
 c34:	97 fb       	bst	r25, 7
 c36:	99 1f       	adc	r25, r25
 c38:	61 f0       	breq	.+24     	; 0xc52 <__fp_splitA+0x20>
 c3a:	9f 3f       	cpi	r25, 0xFF	; 255
 c3c:	79 f0       	breq	.+30     	; 0xc5c <__fp_splitA+0x2a>
 c3e:	87 95       	ror	r24
 c40:	08 95       	ret
 c42:	12 16       	cp	r1, r18
 c44:	13 06       	cpc	r1, r19
 c46:	14 06       	cpc	r1, r20
 c48:	55 1f       	adc	r21, r21
 c4a:	f2 cf       	rjmp	.-28     	; 0xc30 <__fp_split3+0xe>
 c4c:	46 95       	lsr	r20
 c4e:	f1 df       	rcall	.-30     	; 0xc32 <__fp_splitA>
 c50:	08 c0       	rjmp	.+16     	; 0xc62 <__fp_splitA+0x30>
 c52:	16 16       	cp	r1, r22
 c54:	17 06       	cpc	r1, r23
 c56:	18 06       	cpc	r1, r24
 c58:	99 1f       	adc	r25, r25
 c5a:	f1 cf       	rjmp	.-30     	; 0xc3e <__fp_splitA+0xc>
 c5c:	86 95       	lsr	r24
 c5e:	71 05       	cpc	r23, r1
 c60:	61 05       	cpc	r22, r1
 c62:	08 94       	sec
 c64:	08 95       	ret

00000c66 <__fp_zero>:
 c66:	e8 94       	clt

00000c68 <__fp_szero>:
 c68:	bb 27       	eor	r27, r27
 c6a:	66 27       	eor	r22, r22
 c6c:	77 27       	eor	r23, r23
 c6e:	cb 01       	movw	r24, r22
 c70:	97 f9       	bld	r25, 7
 c72:	08 95       	ret

00000c74 <__mulsf3>:
 c74:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__mulsf3x>
 c78:	0c 94 00 06 	jmp	0xc00	; 0xc00 <__fp_round>
 c7c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fp_pscA>
 c80:	38 f0       	brcs	.+14     	; 0xc90 <__mulsf3+0x1c>
 c82:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__fp_pscB>
 c86:	20 f0       	brcs	.+8      	; 0xc90 <__mulsf3+0x1c>
 c88:	95 23       	and	r25, r21
 c8a:	11 f0       	breq	.+4      	; 0xc90 <__mulsf3+0x1c>
 c8c:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__fp_inf>
 c90:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__fp_nan>
 c94:	11 24       	eor	r1, r1
 c96:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_szero>

00000c9a <__mulsf3x>:
 c9a:	0e 94 11 06 	call	0xc22	; 0xc22 <__fp_split3>
 c9e:	70 f3       	brcs	.-36     	; 0xc7c <__mulsf3+0x8>

00000ca0 <__mulsf3_pse>:
 ca0:	95 9f       	mul	r25, r21
 ca2:	c1 f3       	breq	.-16     	; 0xc94 <__mulsf3+0x20>
 ca4:	95 0f       	add	r25, r21
 ca6:	50 e0       	ldi	r21, 0x00	; 0
 ca8:	55 1f       	adc	r21, r21
 caa:	62 9f       	mul	r22, r18
 cac:	f0 01       	movw	r30, r0
 cae:	72 9f       	mul	r23, r18
 cb0:	bb 27       	eor	r27, r27
 cb2:	f0 0d       	add	r31, r0
 cb4:	b1 1d       	adc	r27, r1
 cb6:	63 9f       	mul	r22, r19
 cb8:	aa 27       	eor	r26, r26
 cba:	f0 0d       	add	r31, r0
 cbc:	b1 1d       	adc	r27, r1
 cbe:	aa 1f       	adc	r26, r26
 cc0:	64 9f       	mul	r22, r20
 cc2:	66 27       	eor	r22, r22
 cc4:	b0 0d       	add	r27, r0
 cc6:	a1 1d       	adc	r26, r1
 cc8:	66 1f       	adc	r22, r22
 cca:	82 9f       	mul	r24, r18
 ccc:	22 27       	eor	r18, r18
 cce:	b0 0d       	add	r27, r0
 cd0:	a1 1d       	adc	r26, r1
 cd2:	62 1f       	adc	r22, r18
 cd4:	73 9f       	mul	r23, r19
 cd6:	b0 0d       	add	r27, r0
 cd8:	a1 1d       	adc	r26, r1
 cda:	62 1f       	adc	r22, r18
 cdc:	83 9f       	mul	r24, r19
 cde:	a0 0d       	add	r26, r0
 ce0:	61 1d       	adc	r22, r1
 ce2:	22 1f       	adc	r18, r18
 ce4:	74 9f       	mul	r23, r20
 ce6:	33 27       	eor	r19, r19
 ce8:	a0 0d       	add	r26, r0
 cea:	61 1d       	adc	r22, r1
 cec:	23 1f       	adc	r18, r19
 cee:	84 9f       	mul	r24, r20
 cf0:	60 0d       	add	r22, r0
 cf2:	21 1d       	adc	r18, r1
 cf4:	82 2f       	mov	r24, r18
 cf6:	76 2f       	mov	r23, r22
 cf8:	6a 2f       	mov	r22, r26
 cfa:	11 24       	eor	r1, r1
 cfc:	9f 57       	subi	r25, 0x7F	; 127
 cfe:	50 40       	sbci	r21, 0x00	; 0
 d00:	9a f0       	brmi	.+38     	; 0xd28 <__mulsf3_pse+0x88>
 d02:	f1 f0       	breq	.+60     	; 0xd40 <__mulsf3_pse+0xa0>
 d04:	88 23       	and	r24, r24
 d06:	4a f0       	brmi	.+18     	; 0xd1a <__mulsf3_pse+0x7a>
 d08:	ee 0f       	add	r30, r30
 d0a:	ff 1f       	adc	r31, r31
 d0c:	bb 1f       	adc	r27, r27
 d0e:	66 1f       	adc	r22, r22
 d10:	77 1f       	adc	r23, r23
 d12:	88 1f       	adc	r24, r24
 d14:	91 50       	subi	r25, 0x01	; 1
 d16:	50 40       	sbci	r21, 0x00	; 0
 d18:	a9 f7       	brne	.-22     	; 0xd04 <__mulsf3_pse+0x64>
 d1a:	9e 3f       	cpi	r25, 0xFE	; 254
 d1c:	51 05       	cpc	r21, r1
 d1e:	80 f0       	brcs	.+32     	; 0xd40 <__mulsf3_pse+0xa0>
 d20:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__fp_inf>
 d24:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_szero>
 d28:	5f 3f       	cpi	r21, 0xFF	; 255
 d2a:	e4 f3       	brlt	.-8      	; 0xd24 <__mulsf3_pse+0x84>
 d2c:	98 3e       	cpi	r25, 0xE8	; 232
 d2e:	d4 f3       	brlt	.-12     	; 0xd24 <__mulsf3_pse+0x84>
 d30:	86 95       	lsr	r24
 d32:	77 95       	ror	r23
 d34:	67 95       	ror	r22
 d36:	b7 95       	ror	r27
 d38:	f7 95       	ror	r31
 d3a:	e7 95       	ror	r30
 d3c:	9f 5f       	subi	r25, 0xFF	; 255
 d3e:	c1 f7       	brne	.-16     	; 0xd30 <__mulsf3_pse+0x90>
 d40:	fe 2b       	or	r31, r30
 d42:	88 0f       	add	r24, r24
 d44:	91 1d       	adc	r25, r1
 d46:	96 95       	lsr	r25
 d48:	87 95       	ror	r24
 d4a:	97 f9       	bld	r25, 7
 d4c:	08 95       	ret

00000d4e <__tablejump2__>:
 d4e:	ee 0f       	add	r30, r30
 d50:	ff 1f       	adc	r31, r31
 d52:	05 90       	lpm	r0, Z+
 d54:	f4 91       	lpm	r31, Z
 d56:	e0 2d       	mov	r30, r0
 d58:	09 94       	ijmp

00000d5a <__umulhisi3>:
 d5a:	a2 9f       	mul	r26, r18
 d5c:	b0 01       	movw	r22, r0
 d5e:	b3 9f       	mul	r27, r19
 d60:	c0 01       	movw	r24, r0
 d62:	a3 9f       	mul	r26, r19
 d64:	70 0d       	add	r23, r0
 d66:	81 1d       	adc	r24, r1
 d68:	11 24       	eor	r1, r1
 d6a:	91 1d       	adc	r25, r1
 d6c:	b2 9f       	mul	r27, r18
 d6e:	70 0d       	add	r23, r0
 d70:	81 1d       	adc	r24, r1
 d72:	11 24       	eor	r1, r1
 d74:	91 1d       	adc	r25, r1
 d76:	08 95       	ret

00000d78 <_exit>:
 d78:	f8 94       	cli

00000d7a <__stop_program>:
 d7a:	ff cf       	rjmp	.-2      	; 0xd7a <__stop_program>
